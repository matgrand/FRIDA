function OUT = run_FRIDA_vacuum(...
    meshData_ext, ...
    IE_evol, ...
    Conductors, ...
    SETTINGS)

n_time = length(IE_evol.time_sim);
% % plaparameter = IE_evol.plaparameter;

%% Output quantities


if ~any(strcmp('J_c_t0',fieldnames(SETTINGS)))
    SETTINGS.J_c_t0 = zeros(meshData_ext.n_pas,1);
end
if SETTINGS.IS_EVOL
    if ~any(strcmp('v_gap_t0',fieldnames(SETTINGS)))
        SETTINGS.v_gap_t0 = zeros(meshData_ext.n_cut_pas,1);
    end
end

% % Separatrix_r_TD = zeros(200,n_time);
% % Separatrix_z_TD = zeros(200,n_time);
% % residuo_TD = zeros(1,n_time);
% % Centroid_TD = zeros(2,n_time);
% % Psi_B_TD = zeros(1,n_time);
% % Psi_Ax_TD = zeros(1,n_time);
% % Ax_r_TD = zeros(1,n_time);
% % Ax_z_TD = zeros(1,n_time);
% % Psi_Centroid_TD = zeros(1,n_time);
% % lambda_TD = zeros(1,n_time);
% % ii_freeB_TD = zeros(1,n_time);

if any(strcmp('flux_loops',fieldnames(SETTINGS)))
    Meas_fluxloops_TD = zeros(size(SETTINGS.flux_loops,1),n_time);
end

if any(strcmp('pickup',fieldnames(SETTINGS)))
    Meas_pickup_TD = zeros(size(SETTINGS.pickup,1),n_time);
end

if SETTINGS.IS_EVOL
    J_c_TD = zeros(meshData_ext.n_pas,n_time);
    v_gap_TD = zeros(meshData_ext.n_cut_pas,n_time);
end

% % Psi_TD = zeros(meshData_pla.nn,n_time);
% % I_pla_TD = zeros(meshData_pla.nn,n_time);
% % J_pla_TD = zeros(meshData_pla.n_Gauss*meshData_pla.nt,n_time);



%% First solution (t = t0)


%%% Define input parameters at t0
Conductors_t0 = Conductors;
Conductors_t0.Currents = Conductors_t0.Currents(:,1);

plaparameter_t0 = [];

% % plaparameter_t0.Centroid = plaparameter.Centroid;
% % plaparameter_t0.R_0      = plaparameter.R_0(1);
% % plaparameter_t0.beta_0   = plaparameter.beta_0(1);
% % plaparameter_t0.alpha_M  = plaparameter.alpha_M(1);
% % plaparameter_t0.alpha_N  = plaparameter.alpha_N(1);
% % plaparameter_t0.Ipla     = plaparameter.Ipla(1);


if ~any(strcmp('RR',fieldnames(SETTINGS)))
    Rplot=[min(meshData_ext.n(:,1))...
        max(meshData_ext.n(:,1))]+[-0.3 0.3];
    Zplot=[min(meshData_ext.n(:,2))...
        max(meshData_ext.n(:,2))]+[-0.3 0.3];

    rgrid=linspace(Rplot(1),Rplot(2),100);
    zgrid=linspace(Zplot(1),Zplot(2),100);

    [RR,ZZ] = meshgrid(rgrid,zgrid);

    SETTINGS.RR = RR;
    SETTINGS.ZZ = ZZ;
end
    
    
if SETTINGS.RUN == 0 
    %% VACUUM STATIC
    if any(strcmp('flux_loops',fieldnames(SETTINGS)))
        Meas_fluxloops_TD_t0 = meshData_ext.G_flux_VI_act*Conductors_t0.Currents;
        OUT.Meas_fluxloops = Meas_fluxloops_TD_t0;
    end
    
    if any(strcmp('pickup',fieldnames(SETTINGS)))
        Meas_pickup_TD_t0 = meshData_ext.G_B_pickup_VI_act*Conductors_t0.Currents;
        OUT.Meas_pickup = Meas_pickup_TD_t0;

    end
    
    tri_act = meshData_ext.t;
    nodes_act = meshData_ext.n;
    keyreg_act = meshData_ext.type;
    ind_act = meshData_ext.ind_act;
    n_act = length(ind_act);
    
    degree_G_source = 8;
    
    G_flux_VI_act =fun_G_flux_active_VI_stable_fast(n_act, ...
        tri_act, ...
        nodes_act, ...
        ind_act, ...
        keyreg_act, ...
        degree_G_source, ...
        RR(:), ...
        ZZ(:));
    
    OUT.Psi_RR = reshape(...
        G_flux_VI_act*Conductors_t0.Currents,...
        size(SETTINGS.RR,1),...
        size(SETTINGS.ZZ,1));
    
    [G_Br_VI_act,G_Bz_VI_act] =fun_G_BrBz_active_VI_stable_fast(n_act, ...
        tri_act, ...
        nodes_act, ...
        ind_act, ...
        keyreg_act, ...
        degree_G_source, ...
        RR(:), ...
        ZZ(:));
    
    OUT.Br_RR = reshape(...
        G_Br_VI_act*Conductors_t0.Currents,...
        size(SETTINGS.RR,1),...
        size(SETTINGS.ZZ,1));
    
    OUT.Br_ZZ = reshape(...
        G_Bz_VI_act*Conductors_t0.Currents,...
        size(SETTINGS.RR,1),...
        size(SETTINGS.ZZ,1));
    
    OUT.RR = SETTINGS.RR;
    OUT.ZZ = SETTINGS.ZZ;

else
    %% VACUUM EVOL
    uu = Conductors.Currents;
    time_sim = Conductors.time_sim;
    n_cut_pas = meshData_ext.n_cut_pas;
    
    x_t0 = -meshData_ext.A\meshData_ext.B_act*uu(:,1);
    tic
    xx_VI = fun_DAE_Crank_Nicolson_State_Space(...
        time_sim,...
        x_t0,...
        uu,...
        meshData_ext.E,...
        meshData_ext.A,...
        meshData_ext.B_act);
    toc

    a_VI = xx_VI(1:end-n_cut_pas,:);
    v_gap = xx_VI(end-n_cut_pas+1:end,:);

    jc = meshData_ext.C(:,1:end-n_cut_pas)*a_VI + meshData_ext.D_act*uu;
    
    % %     OUT.a_VI = a_VI;
    OUT.v_gap_TD = v_gap;
    OUT.J_c_TD = jc;
    
    %%% Compute measures (if any)
    if any(strcmp('flux_loops',fieldnames(SETTINGS)))
        Meas_fluxloops_TD = meshData_ext.G_flux_VI_act*Conductors_t0.Currents + ...
            meshData_ext.G_flux_VI_pas*jc;
        OUT.Meas_fluxloops_TD = Meas_fluxloops_TD;
    end
    
    if any(strcmp('pickup',fieldnames(SETTINGS)))
        Meas_pickup_TD = meshData_ext.G_B_pickup_VI_act*Conductors_t0.Currents + ...
            meshData_ext.G_B_pickup_VI_pas*jc;
        OUT.Meas_pickup_TD = Meas_pickup_TD;

    end
    
    
    %%% Compute Psi, Br,Bz on a structured grid
    tri_act = meshData_ext.t;
    nodes_act = meshData_ext.n;
    keyreg_act = meshData_ext.type;
    ind_act = meshData_ext.ind_act;
    n_act = length(ind_act);
    
    meshData_pas = fun_get_meshData_pas(meshData_ext);
    tri = meshData_pas.t;
    nodes = meshData_pas.n;
    
    degree_G_source = 4;
    nodes_matrix = [nodes(tri(:,1),:) ...
        nodes(tri(:,2),:) ...
        nodes(tri(:,3),:)];
    P1 = nodes_matrix(:,[1 2]);
    P2 = nodes_matrix(:,[3 4]);
    P3 = nodes_matrix(:,[5 6]);
    [w_G_source,P_G_source,n_G_source] = fun_Gauss_points_triangle_Dunavant(P1,P2,P3,degree_G_source);
    
    %%% Psi
    G_flux_VI_act =fun_G_flux_active_VI_stable_fast(n_act, ...
        tri_act, ...
        nodes_act, ...
        ind_act, ...
        keyreg_act, ...
        degree_G_source, ...
        RR(:), ...
        ZZ(:));
    
    G_flux_VI_pas = fun_G_flux_passive_VI_stable_fast(tri, ...
        nodes, ...
        N_order, ...
        degree_G_source, ...
        n_G_source, ...
        P_G_source,...
        RR(:), ...
        ZZ(:));
    
    OUT.Psi_RR = zeros(size(SETTINGS.RR,1),size(SETTINGS.ZZ,2),n_time);
    for i = 1:n_time
        OUT.Psi_RR(:,:,i) = reshape(...
        G_flux_VI_act*Conductors.Currents(:,i) + G_flux_VI_pas*OUT.J_c_TD(:,i),...
        size(SETTINGS.RR,1),...
        size(SETTINGS.ZZ,1));
    end
    
    %%% Br, Bz
    [G_Br_VI_pas,G_Bz_VI_pas] = fun_G_BrBz_passive_VI_stable_fast(tri, ...
        nodes, ...
        N_order, ...
        degree_G_source, ...
        n_G_source, ...
        P_G_source,...
        RR(:), ...
        ZZ(:));
    
    [G_Br_VI_act,G_Bz_VI_act] =fun_G_BrBz_active_VI_stable_fast(n_act, ...
        tri_act, ...
        nodes_act, ...
        ind_act, ...
        keyreg_act, ...
        degree_G_source, ...
        RR(:), ...
        ZZ(:));
    
    OUT.Br_RR = zeros(size(SETTINGS.RR,1),size(SETTINGS.ZZ,2),n_time);
    OUT.Br_ZZ = zeros(size(SETTINGS.RR,1),size(SETTINGS.ZZ,2),n_time);
    for i = 1:n_time
        OUT.Br_RR(:,:,i) = reshape(...
            G_flux_VI_act*Conductors.Currents(:,i) + G_Br_VI_pas*OUT.J_c_TD(:,i),...
            size(SETTINGS.RR,1),...
            size(SETTINGS.ZZ,1));
        OUT.Br_ZZ(:,:,i) = reshape(...
            G_flux_VI_act*Conductors.Currents(:,i) + G_flux_VI_pas*OUT.J_c_TD(:,i),...
            size(SETTINGS.RR,1),...
            size(SETTINGS.ZZ,1));
    end
    OUT.Br_RR = reshape(...
        G_Br_VI_act*Conductors_t0.Currents + G_Br_VI_pas*OUT.J_c_TD,...
        size(SETTINGS.RR,1),...
        size(SETTINGS.ZZ,1));
    
    OUT.Br_ZZ = reshape(...
        G_Bz_VI_act*Conductors_t0.Currents + G_Bz_VI_pas*OUT.J_c_TD,...
        size(SETTINGS.RR,1),...
        size(SETTINGS.ZZ,1));
    
    OUT.RR = SETTINGS.RR;
    OUT.ZZ = SETTINGS.ZZ;
    
end

%% VACUUM EVOL


if SETTINGS.ii_START == 1
    
    fprintf('\n\n')
    fprintf('==================================================================\n')
    fprintf('==================================================================\n')
    
    fprintf('                *** FIRST SOLUTION (t = t0) ***\n')
    
    fprintf('==================================================================\n')
    fprintf('==================================================================\n')
    fprintf('\n\n')
    
    %%% If passive current at t0 is not defined (SETTINGS.J_c_t0), set it to zero
    if SETTINGS.IS_EVOL
        J_c_TD(:,1) = SETTINGS.J_c_t0;
    end
    
    
    %%% Compute vacuum field by only BCs of active and passive current
    Psi_MS_bc_act = meshData_ext.G_BCs_VI_act*Conductors_t0.Currents;
    Psi_MS_bc_pas = meshData_ext.G_BCs_VI_pas*SETTINGS.J_c_t0;
    
    SETTINGS.Psi_MS_bc = (Psi_MS_bc_act + Psi_MS_bc_pas)/2/pi;
    SETTINGS.VAC_METHOD = 3;
    
    
    %%% Compute eqiulibrium at t0
    %%% STATIC VACUUM
    % %     if SETTINGS.RUN == 0
    % %     [OUTPUT_FRIDA_t0] = run_FRIDA_vacuum_t0(...
    % %         meshData_pla,...
    % %         meshData_ext,...
    % %         Conductors_t0,...
    % %         SETTINGS);
    % %
    % %     Psi_TD(:,1) = 2*pi*solk_t0.Psi; % TOTAL poloidal flux
    % %     I_pla_TD(:,1) = solk_t0.Iphi;
    % %     J_pla_TD(:,1) = solk_t0.Jphi;
    % %     Separatrix_r_TD(:,1) = solk_t0.Separatrix(:,1);
    % %     Separatrix_z_TD(:,1) = solk_t0.Separatrix(:,2);
    % %     residuo_TD(1) = OUTPUT_FRIDA_t0.solk1.residuo_norm;
    % %     Centroid_TD(:,1) = [OUTPUT_FRIDA_t0.solk1.Centroid_RR OUTPUT_FRIDA_t0.solk1.Centroid_ZZ].';
    % %     Psi_B_TD(:,1) = 2*pi*solk_t0.Psi_B; % TOTAL poloidal flux
    % %     Psi_Ax_TD(:,1) = 2*pi*solk_t0.Psi_a; % TOTAL poloidal flux
    % %     Psi_Centroid_TD(:,1) = 2*pi*solk_t0.Centroid_Psi; % TOTAL poloidal flux
    % %     lambda_TD(:,1) = solk_t0.lambda;
    % %     Ax_r_TD(:,1) = OUTPUT_FRIDA_t0.solk1.Axis_RR;
    % %     Ax_z_TD(:,1) = OUTPUT_FRIDA_t0.solk1.Axis_ZZ;
    % %     ii_freeB_TD(1) = OUTPUT_FRIDA_t0.ii_freeB;
    % %
    % %     if any(strcmp('flux_loops',fieldnames(SETTINGS)))
    % %         Meas_fluxloops_TD_t0 = meshData_ext.G_flux_VI_act*Conductors_t0.Currents + ...
    % %             meshData_pla.G_flux_loops_pla*OUTPUT_FRIDA_t0.solk1.Iphi + ...
    % %             meshData_ext.G_flux_VI_pas*SETTINGS.J_c_t0;
    % %
    % %         Meas_fluxloops_TD(:,1) = Meas_fluxloops_TD_t0;
    % %     end
    % %
    % %     if any(strcmp('pickup',fieldnames(SETTINGS)))
    % %         Meas_pickup_TD_t0 = meshData_ext.G_B_pickup_VI_act*Conductors_t0.Currents + ...
    % %             meshData_pla.G_pickup_pla*OUTPUT_FRIDA_t0.solk1.Iphi + ...
    % %             meshData_ext.G_B_pickup_VI_pas*SETTINGS.J_c_t0;
    % %         Meas_pickup_TD(:,1) = Meas_pickup_TD_t0;
    % %     end
    
    %%% STSTIC WITH PLASMA
    % %     if SETTINGS.RUN == 1
    meshData_pla = [];
    [OUTPUT_FRIDA_t0] = run_FRIDA_evol_t0(...
        meshData_pla,...
        meshData_ext,...
        Conductors_t0,...
        plaparameter_t0,...
        SETTINGS);
    
    % %     openfig kjsbdfskjbfds
    % %     plot(OUTPUT_FRIDA_t0.solk1.Separatrix(:,1),OUTPUT_FRIDA_t0.solk1.Separatrix(:,2),'-*k');
    
    %%% Post-processing
    if SETTINGS.RUN == 3 % evol sim
        solk_t0 = OUTPUT_FRIDA_t0.solk1;
        solk_t0.xx_th = solk_t0.xx_k;
        
        solk_t0.v_gap = SETTINGS.v_gap_t0;
        solk_t0.J_c_th = SETTINGS.J_c_t0;
        
        Psi_TD(:,1) = 2*pi*solk_t0.Psi; % TOTAL poloidal flux
        I_pla_TD(:,1) = solk_t0.Iphi;
        J_pla_TD(:,1) = solk_t0.Jphi;
        Separatrix_r_TD(:,1) = solk_t0.Separatrix(:,1);
        Separatrix_z_TD(:,1) = solk_t0.Separatrix(:,2);
        residuo_TD(1) = OUTPUT_FRIDA_t0.solk1.residuo_norm;
        Centroid_TD(:,1) = [OUTPUT_FRIDA_t0.solk1.Centroid_RR OUTPUT_FRIDA_t0.solk1.Centroid_ZZ].';
        Psi_B_TD(:,1) = 2*pi*solk_t0.Psi_B; % TOTAL poloidal flux
        Psi_Ax_TD(:,1) = 2*pi*solk_t0.Psi_a; % TOTAL poloidal flux
        Psi_Centroid_TD(:,1) = 2*pi*solk_t0.Centroid_Psi; % TOTAL poloidal flux
        lambda_TD(:,1) = solk_t0.lambda;
        Ax_r_TD(:,1) = OUTPUT_FRIDA_t0.solk1.Axis_RR;
        Ax_z_TD(:,1) = OUTPUT_FRIDA_t0.solk1.Axis_ZZ;
        ii_freeB_TD(1) = OUTPUT_FRIDA_t0.ii_freeB;
        
    end
    if any(strcmp('flux_loops',fieldnames(SETTINGS)))
        Meas_fluxloops_TD_t0 = meshData_ext.G_flux_VI_act*Conductors_t0.Currents + ...
            meshData_pla.G_flux_loops_pla*OUTPUT_FRIDA_t0.solk1.Iphi + ...
            meshData_ext.G_flux_VI_pas*SETTINGS.J_c_t0;
        OUTPUT_FRIDA_t0.solk1.Meas_fluxloops = Meas_fluxloops_TD_t0;
        
        if SETTINGS.RUN == 3
            Meas_fluxloops_TD_t0 = meshData_ext.G_flux_VI_act*Conductors_t0.Currents + ...
                meshData_pla.G_flux_loops_pla*OUTPUT_FRIDA_t0.solk1.Iphi + ...
                meshData_ext.G_flux_VI_pas*SETTINGS.J_c_t0;
            Meas_fluxloops_TD(:,1) = Meas_fluxloops_TD_t0;
        end
    end
    
    if any(strcmp('pickup',fieldnames(SETTINGS)))
        Meas_pickup_TD_t0 = meshData_ext.G_B_pickup_VI_act*Conductors_t0.Currents + ...
            meshData_pla.G_pickup_pla*OUTPUT_FRIDA_t0.solk1.Iphi;
        OUTPUT_FRIDA_t0.solk1.Meas_pickup = Meas_pickup_TD_t0;
        
        if SETTINGS.RUN == 3
            Meas_pickup_TD_t0 = meshData_ext.G_B_pickup_VI_act*Conductors_t0.Currents + ...
                meshData_pla.G_pickup_pla*OUTPUT_FRIDA_t0.solk1.Iphi + ...
                meshData_ext.G_B_pickup_VI_pas*SETTINGS.J_c_t0;
            Meas_pickup_TD(:,1) = Meas_pickup_TD_t0;
        end
    end
    
end

%% Time-stepping scheme

if SETTINGS.IS_EVOL
    
    fprintf('\n\n')
    fprintf('==================================================================\n')
    fprintf('==================================================================\n')
    
    % % fprintf('\n')
    fprintf('             *** STARTING TIME DOMAIN SIMULATION ***\n')
    % % fprintf('\n\n')
    
    fprintf('==================================================================\n')
    fprintf('==================================================================\n')
    fprintf('\n\n')
    
    SETTINGS.RUN_FIXBOUNDARY = false;
    
    v_gap_TD(:,1) = SETTINGS.v_gap_t0;
    
    
    if SETTINGS.ii_START > 1
        filename_load = sprintf('./temp_out/input_ii_%i.mat',SETTINGS.ii_START);
        load(filename_load, 'solk_old')
    else
        solk_old = solk_t0;
    end
    
    
    lambda_Ipla_th = solk_old.Iphi(meshData_pla.ind_D);
    a_pas_t0 = meshData_ext.L_VI*solk_old.J_c_th + ...
        meshData_ext.M_VI*Conductors_t0.Currents + ...
        meshData_ext.G_CS_VI_pas*meshData_pla.T_Ipla_eq_D*lambda_Ipla_th;
    
    xx_DAE_t0 = [a_pas_t0; solk_old.v_gap];
    solk_old.xx_DAE_old = xx_DAE_t0;
    
    J_c_th = solk_old.J_c_th;
    
    if isfield(solk_old,'xx_k')
        solk_old.xx_th = solk_old.xx_k;
        solk_old = rmfield(solk_old,'xx_k');
    end
    
    SETTINGS.VAC_METHOD = 3;
    SETTINGS.FIRST_SOLUTION = true;
    SETTINGS.FIRST_SOLUTION = true;
    SETTINGS.NFREEB_FIXB = 0;
    SETTINGS.TOLL = 1e-10;
    SETTINGS.SCARTO =  1e-10;
    SETTINGS.SOLVER_RELAXED = true;
    % % SETTINGS.FIGURES = true;
    SETTINGS.ii_freeB_max = 25;
    SETTINGS.SAVE_OUTPUT = false;
    SETTINGS.SOLVER = 'NR';
    SETTINGS.ii_CN_tot = n_time;
    
    
    %%%
    time_CN_start = tic;
    hh_CN = waitbar(0,sprintf('Running Crank-Nicolson: step %i of %i',SETTINGS.ii_START+1,n_time));
    for ii_CN = SETTINGS.ii_START+1:n_time
        
        waitbar(ii_CN/n_time,hh_CN,sprintf('Running Crank-Nicolson: step %i of %i',ii_CN,n_time))
        SETTINGS.ii_CN = ii_CN;
        
        ind_time = ii_CN;
        
        plaparameter_th.Centroid = [2.01 -.04];
        plaparameter_th.Ipla     = IE_evol.plaparameter.Ipla(ind_time);
        plaparameter_th.R_0      = IE_evol.plaparameter.R_0(ind_time);
        plaparameter_th.beta_0   = IE_evol.plaparameter.beta_0(ind_time);
        plaparameter_th.alpha_M  = IE_evol.plaparameter.alpha_M(ind_time);
        plaparameter_th.alpha_N  = IE_evol.plaparameter.alpha_N(ind_time);
        
        Conductors_th.Nconductors  = IE_evol.Conductors.Nconductors(1);
        Conductors_th.Nturns       = IE_evol.Conductors.Nturns(:,1);
        Conductors_th.Currents     = IE_evol.Conductors.Currents(:,ind_time);%.*IE_evol.Conductors.Nturns(:,2);
        Conductors_th.Currents_old = IE_evol.Conductors.Currents(:,ind_time-1);%.*IE_evol.Conductors.Nturns(:,2);
        
        %%% Compute vacuum field by only BCs of active and passive current
        Psi_MS_bc_act = meshData_ext.G_BCs_VI_act*Conductors_th.Currents;
        Psi_MS_bc_pas = meshData_ext.G_BCs_VI_pas*solk_old.J_c_th;
        
        SETTINGS.Psi_MS_bc = (Psi_MS_bc_act + Psi_MS_bc_pas)/2/pi;
        SETTINGS.Psi_MS_bc_act = Psi_MS_bc_act/2/pi;
        
        SETTINGS.xx_0 = solk_old.xx_th;
        
        close all
        
        
        try
            
            solk_old_save = solk_old;
            if isfield(solk_old,'LU')
                solk_old = rmfield(solk_old,'LU');
            end
            filename_save = sprintf('./temp_out/input_ii_%i.mat',ii_CN-1);
            solk_old = solk_old_save;
            
            [OUT_th] = run_FRIDA_TD_CN(meshData_pla,... % CN = Crank Nicolson
                meshData_ext,...
                plaparameter_th,...
                Conductors_th,...
                solk_old, ...
                SETTINGS);
            
            if  OUT_th.ii_freeB >= SETTINGS.ii_freeB_max && ...
                    OUT_th.residuo_norm_tot(end) >= 5e-5
                error('better to stop here!')
            end
            
            %%%
            solk_old.xx_th = OUT_th.solk1.xx_k;
            solk_old.J_c_th = OUT_th.solk1.J_c;
            
            %%%
            solk_old.xx_th           = OUT_th.solk1.xx_k;
            solk_old.xx_DAE_old      = OUT_th.solk1.xx_DAE;
            solk_old.Iphi            = OUT_th.solk1.Iphi;
            solk_old.Grad_nodes      = OUT_th.solk1.Grad_nodes;
            solk_old.Psi_Gauss       = OUT_th.solk1.Psi_Gauss;
            solk_old.Grad_Gauss      = OUT_th.solk1.Grad_Gauss;
            solk_old.Psi_c_t         = OUT_th.solk1.Psi_c_t;
            solk_old.Grad_c_t        = OUT_th.solk1.Grad_c_t;
            solk_old.Psi_axis        = OUT_th.solk1.Psi_axis;
            solk_old.Axis_RR         = OUT_th.solk1.Axis_RR;
            solk_old.Axis_ZZ         = OUT_th.solk1.Axis_ZZ;
            solk_old.ind_n_axis      = OUT_th.solk1.ind_n_axis;
            solk_old.delta_a_weights = OUT_th.solk1.delta_a_weights;
            solk_old.Psi_B           = OUT_th.solk1.Psi_B;
            solk_old.XP_RR           = OUT_th.solk1.XP_RR;
            solk_old.XP_ZZ           = OUT_th.solk1.XP_ZZ;
            solk_old.ind_t_Xp        = OUT_th.solk1.ind_t_Xp;
            solk_old.ind_n_XP        = OUT_th.solk1.ind_n_XP;
            solk_old.delta_b_weights = OUT_th.solk1.delta_b_weights;
            solk_old.Separatrix      = OUT_th.solk1.Separatrix;
            solk_old.Psi_Bpla        = OUT_th.solk1.Psi_Bpla;
            
            %%% For Quasi Newton
            if SETTINGS.QuasiNewton == true
                solk_old.LU = OUT_th.solk1.LU;
                solk_old.RR_psi_k = OUT_th.solk1.RR_psi_k;
            end
            
            %%% Measures
            if any(strcmp('flux_loops',fieldnames(SETTINGS)))
                Meas_fluxloops_TD_th = meshData_ext.G_flux_VI_act*Conductors_th.Currents + ...
                    meshData_pla.G_flux_loops_pla*OUT_th.solk1.Iphi + ...
                    meshData_ext.G_flux_VI_pas*solk_old.J_c_th;
                
                Meas_fluxloops_TD(:,ii_CN) = Meas_fluxloops_TD_th;
            end
            
            if any(strcmp('pickup',fieldnames(SETTINGS)))
                Meas_pickup_TD_th = meshData_ext.G_B_pickup_VI_act*Conductors_th.Currents + ...
                    meshData_pla.G_pickup_pla*OUT_th.solk1.Iphi + ...
                    meshData_ext.G_B_pickup_VI_pas*solk_old.J_c_th;
                
                Meas_pickup_TD(:,ii_CN) = Meas_pickup_TD_th;
            end
            
            
            %%% output quantities
            Separatrix_r_TD(:,ii_CN) = OUT_th.solk1.Separatrix(:,1);
            Separatrix_z_TD(:,ii_CN) = OUT_th.solk1.Separatrix(:,2);
            residuo_TD(ii_CN)        = OUT_th.solk1.residuo_norm;
            Centroid_TD(:,ii_CN)     = [OUT_th.solk1.Centroid_RR OUT_th.solk1.Centroid_ZZ].';
            J_c_TD(:,ii_CN)          = solk_old.J_c_th;
            v_gap_TD(:,ii_CN)        = OUT_th.solk1.v_gap;
            Psi_TD(:,ii_CN)          = 2*pi*OUT_th.solk1.Psi; % TOTAL poloidal flux
            Psi_B_TD(:,ii_CN)        = 2*pi*OUT_th.solk1.Psi_B; % TOTAL poloidal flux
            Psi_Ax_TD(:,ii_CN)       = 2*pi*OUT_th.solk1.Psi_a; % TOTAL poloidal flux
            Psi_Centroid_TD(:,ii_CN) = 2*pi*OUT_th.solk1.Centroid_Psi; % TOTAL poloidal flux
            I_pla_TD(:,ii_CN)        = OUT_th.solk1.Iphi;
            J_pla_TD(:,ii_CN)        = OUT_th.solk1.Jphi;
            lambda_TD(:,ii_CN)       = OUT_th.solk1.lambda;
            Ax_r_TD(:,ii_CN)         = OUT_th.solk1.Axis_RR;
            Ax_z_TD(:,ii_CN)         = OUT_th.solk1.Axis_ZZ;
            ii_freeB_TD(:,ii_CN)     = OUT_th.ii_freeB;
            
            
        catch me
            warning('Something went wrong. %s\n',me.message)
            fprintf('%s',me.message)
            % %             save data_debug_2
            aa = 0;
            % %         warning(me.identifier,'%s',me.message)
            break
            
        end
        
    end
    
    close(hh_CN)
    time_CN = toc(time_CN_start);
    
end

%% Output quantity

if ~SETTINGS.IS_EVOL
    time_CN = [];
    time_sim = 0;
end

if SETTINGS.ii_START > 1
    
    for ii_CN = 1:SETTINGS.ii_START
        filename_load = sprintf('./temp_out/input_ii_%i.mat',ii_CN);
        load(filename_load, 'solk_old')
        
        
        Separatrix_r_TD(:,ii_CN) = solk_old.Separatrix(:,1);
        Separatrix_z_TD(:,ii_CN) = solk_old.Separatrix(:,2);
        residuo_TD(ii_CN)        = solk_old.residuo_norm;
        Centroid_TD(:,ii_CN)     = [solk_old.Centroid_RR solk_old.Centroid_ZZ].';
        J_c_TD(:,ii_CN)          = solk_old.J_c_th;
        v_gap_TD(:,ii_CN)        = solk_old.v_gap;
        Psi_TD(:,ii_CN)          = 2*pi*solk_old.Psi; % TOTAL poloidal flux
        Psi_B_TD(:,ii_CN)        = 2*pi*solk_old.Psi_B; % TOTAL poloidal flux
        Psi_Ax_TD(:,ii_CN)       = 2*pi*solk_old.Psi_a; % TOTAL poloidal flux
        Psi_Centroid_TD(:,ii_CN) = 2*pi*solk_old.Centroid_Psi; % TOTAL poloidal flux
        I_pla_TD(:,ii_CN)        = solk_old.Iphi;
        J_pla_TD(:,ii_CN)        = solk_old.Jphi;
        lambda_TD(:,ii_CN)       = solk_old.lambda;
        Ax_r_TD(:,ii_CN)         = solk_old.Axis_RR;
        Ax_z_TD(:,ii_CN)         = solk_old.Axis_ZZ;
        
        
        Conductors_th.Currents = IE_evol.Conductors.Currents(:,ii);%.*IE_evol.Conductors.Nturns(:,2);
        
        if any(strcmp('flux_loops',fieldnames(SETTINGS)))
            Meas_fluxloops_TD_th = meshData_ext.G_flux_VI_act*Conductors_th.Currents + ...
                meshData_pla.G_flux_loops_pla*solk_old.Iphi + ...
                meshData_ext.G_flux_VI_pas*solk_old.J_c_th;
            
            Meas_fluxloops_TD(:,ii_CN) = Meas_fluxloops_TD_th;
        end
        
        if any(strcmp('pickup',fieldnames(SETTINGS)))
            Meas_pickup_TD_th = meshData_ext.G_B_pickup_VI_act*Conductors_th.Currents + ...
                meshData_pla.G_pickup_pla*solk_old.Iphi + ...
                meshData_ext.G_B_pickup_VI_pas*solk_old.J_c_th;
            
            Meas_pickup_TD(:,ii_CN) = Meas_pickup_TD_th;
        end
        
    end
end



%%%
if SETTINGS.IS_EVOL % evol sim
    
    n_time_new = numel(find(Ax_r_TD ~= 0));
    ii_time_new = 1:n_time_new;
    
    OUT.time_sim          = IE_evol.time_sim(ii_time_new);
    OUT.Conductors        = Conductors;
    OUT.IE_evol           = IE_evol;
    
    OUT.Separatrix_r_TD   = Separatrix_r_TD(:,ii_time_new);
    OUT.Separatrix_z_TD   = Separatrix_z_TD(:,ii_time_new);
    OUT.residuo_TD        = residuo_TD(ii_time_new);
    OUT.Centroid_TD       = Centroid_TD(:,ii_time_new);
    OUT.J_c_TD            = J_c_TD(:,ii_time_new);
    OUT.v_gap_TD          = v_gap_TD(:,ii_time_new);
    OUT.Psi_TD            = Psi_TD(:,ii_time_new);
    OUT.Psi_B_TD          = Psi_B_TD(ii_time_new);
    OUT.Psi_Ax_TD         = Psi_Ax_TD(ii_time_new);
    OUT.Ax_r_TD           = Ax_r_TD(ii_time_new);
    OUT.Ax_z_TD           = Ax_z_TD(ii_time_new);
    OUT.Psi_Centroid_TD   = Psi_Centroid_TD(ii_time_new);
    OUT.I_pla_TD          = I_pla_TD(:,ii_time_new);
    OUT.J_pla_TD          = J_pla_TD(:,ii_time_new);
    OUT.lambda_TD         = lambda_TD(ii_time_new);
    OUT.Meas_fluxloops_TD = Meas_fluxloops_TD(:,ii_time_new);
    OUT.Meas_pickup_TD    = Meas_pickup_TD(:,ii_time_new);
    
    OUT.time_CN           = time_CN;
    OUT.ii_freeB_TD       = ii_freeB_TD;
    
else % static sim
    
    OUT = OUTPUT_FRIDA_t0.solk1;
    
end


% % save OUT OUT

























